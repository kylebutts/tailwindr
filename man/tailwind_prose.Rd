% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tailwind_prose.R
\name{tailwind_prose}
\alias{tailwind_prose}
\title{TailwindCSS with Tailwind Typography in Rmd documents}
\usage{
tailwind_prose(
  highlight = "zenburn",
  slim_css = FALSE,
  self_contained = TRUE,
  css = NULL,
  clean_supporting = TRUE,
  template = NULL,
  ...
)
}
\arguments{
\item{highlight}{Syntax highlighting style. Supported styles include
"default", "tango", "pygments", "kate", "monochrome", "espresso", "zenburn",
"haddock", and "textmate". Pass NULL to prevent syntax highlighting.}

\item{slim_css}{Whether or not to include entirety of TailwindCSS or not. See
Details for more information.}

\item{self_contained}{Produce a standalone HTML file with no external
dependencies, using data: URIs to incorporate the contents of linked scripts,
stylesheets, images, and videos. Note that even for self contained documents
MathJax is still loaded externally (this is necessary because of its size).
*Important:* Everything will be self_contained except for the compiled css
(for now!)}

\item{css}{CSS files to include. See Details for moremore details on using
`@apply`.}

\item{clean_supporting}{Logical. Whether or not to clear supporting files.
Default is TRUE.}

\item{template}{Pandoc template to use for rendering. Pass `NULL` to use
built-in tailwand template. See `example` folder in source code for example
of using Tailwind CSS in template. Note you should use
`<article class="prose">` to use Tailwind Typography!}
}
\description{
TailwindCSS with Tailwind Typography in Rmd documents
}
\details{
Requires Node (npm) to be installed on system.

  Uses Tailwind Typography. For more information visit
  \url{https://github.com/tailwindlabs/tailwindcss-typography}.

  The parameter `slim_css` uses PostCSS to only include the css classes that
  appear in the final html document. This is great for keeping files very
  small, but bad if you are trying to edit through chrome or firefox for example.
  I recommend putting `slim_css: false` into the yaml while developing and
  `slim_css: true` when ready to finish.

  Custom css is possible by passing objects to the `css` yaml parameter.
  Importantly, you can use the `@apply` directives that come with tailwind
  to easily compile set of classes. See
  \url{https://tailwindcss.com/docs/functions-and-directives#apply}
  for more details.
}
